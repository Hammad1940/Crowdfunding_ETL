# -*- coding: utf-8 -*-
"""ETL_Mini_Project_Starter_Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kk2eWW8Q-wrjrMC_W_VvKzBdntcXCxIp
"""

# Import dependencies
import pandas as pd
import numpy as np
pd.set_option('max_colwidth', 400)

"""### Extract the crowdfunding.xlsx Data"""

# Read the data into a Pandas DataFrame
crowd_file = '/content/crowdfunding.xlsx'
crowdfunding_info_df = pd.read_excel(crowd_file)
crowdfunding_info_df.head()

# Get a brief summary of the crowdfunding_info DataFrame.
crowdfunding_info_df.info()

"""### Create the Category and Subcategory DataFrames
---
**Create a Category DataFrame that has the following columns:**
- A "category_id" column that is numbered sequential form 1 to the length of the number of unique categories.
- A "category" column that has only the categories.

Export the DataFrame as a `category.csv` CSV file.

**Create a SubCategory DataFrame that has the following columns:**
- A "subcategory_id" column that is numbered sequential form 1 to the length of the number of unique subcategories.
- A "subcategory" column that has only the subcategories. 

Export the DataFrame as a `subcategory.csv` CSV file.
"""

# Get the crowdfunding_info_df columns.
cols = crowdfunding_info_df.columns
print(cols)

# Assign the category and subcategory values to category and subcategory columns.
crowdfunding_info_df[['category', 'subcategory']] = crowdfunding_info_df['category & sub-category'].str.split('/', expand=True)
crowdfunding_info_df.head()

# Get the unique categories and subcategories in separate lists.
categories = crowdfunding_info_df['category'].unique()
subcategories = crowdfunding_info_df['subcategory'].unique()
print(categories)
print(subcategories)

# Get the number of distinct values in the categories and subcategories lists.
print(len(categories))
print(len(subcategories))

# Create numpy arrays from 1-9 for the categories and 1-24 for the subcategories.
category_ids = np.arange(1, len(categories)+1)
subcategory_ids = np.arange(1, len(subcategories)+1)

print(category_ids)
print(subcategory_ids)

# Use a list comprehension to add "cat" to each category_id. 
cat_ids = ['cat'+str(x) for x in category_ids]
# Use a list comprehension to add "subcat" to each subcategory_id.    
scat_ids = ['subcat'+str(x) for x in subcategory_ids]
 
print(cat_ids)
print(scat_ids)

# Create a category DataFrame with the category_id array as the category_id and categories list as the category name.
# both lists, with columns specified
category_df = pd.DataFrame(list(zip(cat_ids, categories)), columns =['category_id', 'category'])

# Create a category DataFrame with the subcategory_id array as the subcategory_id and subcategories list as the subcategory name. 
subcategory_df = pd.DataFrame(list(zip(scat_ids, subcategories)), columns =['subcategory_id', 'subcategory'])

category_df

subcategory_df

# Export categories_df and subcategories_df as CSV files.
category_df.to_csv("category.csv", index=False)
subcategory_df.to_csv("subcategory.csv", index=False)

# category_df.to_csv("Resources/category.csv", index=False)
# subcategory_df.to_csv("Resources/subcategory.csv", index=False)

"""### Campaign DataFrame
----
**Create a Campaign DataFrame that has the following columns:**
- The "cf_id" column.
- The "contact_id" column.
- The “company_name” column.
- The "blurb" column is renamed as "description."
- The "goal" column.
- The "goal" column is converted to a `float` datatype.
- The "pledged" column is converted to a `float` datatype. 
- The "backers_count" column. 
- The "country" column.
- The "currency" column.
- The "launched_at" column is renamed as "launch_date" and converted to a datetime format. 
- The "deadline" column is renamed as "end_date" and converted to a datetime format.
- The "category_id" with the unique number matching the “category_id” from the category DataFrame. 
- The "subcategory_id" with the unique number matching the “subcategory_id” from the subcategory DataFrame.
- And, create a column that contains the unique four-digit contact ID number from the `contact.xlsx` file.
 

Then export the DataFrame as a `campaign.csv` CSV file.

"""

# Create a copy of the crowdfunding_info_df DataFrame name campaign_df. 
campaign_df = crowdfunding_info_df.copy()
campaign_df.head()

# Rename the blurb, launched_at, and deadline columns.
campaign_df = campaign_df.rename(columns={'blurb': 'description',
                                        'launched_at': 'launch_date',
                                        'deadline':  'end_date'})
campaign_df.head()

# Convert the goal and pledged columns to a `float` data type.
campaign_df['goal'] = pd.to_numeric(campaign_df['goal'], errors='coerce')
campaign_df['pledged'] = pd.to_numeric(campaign_df['pledged'], errors='coerce')

campaign_df.head()

# Check the datatypes
campaign_df.dtypes

# Format the launch_date and end_date columns to datetime format
from datetime import datetime as dt
campaign_df['launch_date'] = pd.to_datetime(campaign_df['launch_date'], unit='s').dt.date
campaign_df['end_date'] = pd.to_datetime(campaign_df['end_date'], unit='s').dt.date

campaign_df.head()

# Merge the campaign_df with the category_df on the "category" column and 
campaign_merged_df = campaign_df.merge(category_df, on='category')

# the subcategory_df on the "subcategory" column.
campaign_merged_df = campaign_merged_df.merge(subcategory_df, on='subcategory')

campaign_merged_df.tail(10)

# Drop unwanted columns
campaign_cleaned = campaign_merged_df.drop(['outcome', 'staff_pick', 'spotlight', 'category & sub-category', 'category', 'subcategory'], axis=1)
campaign_cleaned.head()

# Export the DataFrame as a CSV file. 
campaign_cleaned.to_csv("campaign.csv", index=False)
# campaign_cleaned.to_csv("Resources/campaign.csv", index=False)

"""### Extract the contacts.xlsx Data."""

# Read the data into a Pandas DataFrame. Use the `header=2` parameter when reading in the data.
contact_info_df = pd.read_excel('contacts.xlsx', header=3)

# contact_info_df = pd.read_excel('Resources/contacts.xlsx', header=3)
contact_info_df.head()

"""### Create the Contacts DataFrame 
---
**Create a Contacts DataFrame that has the following columns:**
- A column named "contact_id"  that contains the unique number of the contact person.
- A column named "first_name" that contains the first name of the contact person.
- A column named "last_name" that contains the first name of the contact person.
- A column named "email" that contains the email address of the contact person

Then export the DataFrame as a `contacts.csv` CSV file.

### Option 1: Use Pandas to create the contacts DataFrame.
"""

# Iterate through the contact_info_df and convert each row to a dictionary.
import json
dict_values = []

import ast
for index, row in contact_info_df.iterrows():
  single_row = ast.literal_eval(row["contact_info"])
  keys_list = list(single_row.values())
  dict_values.append(keys_list)

# Print out the list of values for each row.
print(dict_values)

# Create a contact_info DataFrame and add each list of values, i.e., each row 
# to the 'contact_id', 'name', 'email' columns.
contact_info = pd.DataFrame(dict_values, columns =[ 'contact_id', 'name', 'email'])
contact_info.head()

# Check the datatypes.
contact_info.info()

# Create a "first_name" and "last_name" column with the first and last names from the "name" column. 
contact_info['first_name'] = contact_info['name'].apply(lambda x:x.split(' ')[0])
contact_info['last_name'] = contact_info['name'].apply(lambda x:x.split(' ')[1])

# Drop the contact_name column
contacts_df_clean = contact_info.drop('name', axis=1)
contacts_df_clean.head(10)

# Reorder the columns
contacts_df_clean = contacts_df_clean[['contact_id', 'first_name', 'last_name', 'email']]
contacts_df_clean.head()

# Check the datatypes one more time before exporting as CSV file.
contacts_df_clean.info()

# Export the DataFrame as a CSV file.

# i have change the name, as we did this with different method using lists
contacts_df_clean.to_csv("contacts_list.csv", encoding='utf8', index=False) 
# contacts_df_clean.to_csv("Resources/contacts.csv", encoding='utf8', index=False)

"""### Option 2: Use regex to create the contacts DataFrame."""

contact_info_df_copy = contact_info_df.copy()
contact_info_df_copy.head()

# Extract the four-digit contact ID number.
contact_info_df_copy['contact_id']=contact_info_df_copy['contact_info'].str.extract('([-+]?\d*\.?\d+)')
contact_info_df_copy.head()

# Check the datatypes.
contact_info_df_copy.info()

# Convert the "contact_id" column to an int64 data type.
contact_info_df_copy['contact_id'] = contact_info_df_copy['contact_id'].astype('int')
contact_info_df_copy.info()

# Extract the name of the contact and add it to a new column.
contact_info_df_copy['name'] = contact_info_df_copy['contact_info'].apply(lambda x:x.split(',')[1].split(':')[1].replace('"', ''))
contact_info_df_copy.head()

# Extract the name of the contact and add it to a new column.
contact_info_df_copy['name'] = contact_info_df_copy['contact_info'].apply(lambda x:x.split(',')[1].split(':')[1].replace('"', ''))
contact_info_df_copy.head()

# Extract the email from the contacts and add the values to a new column.
contact_info_df_copy['email'] = contact_info_df_copy['contact_info'].apply(lambda x:x.split(',')[2].split(':')[1].replace('"', '').replace('}',''))
contact_info_df_copy.head()

# Create a copy of the contact_info_df with the 'contact_id', 'name', 'email' columns.
contact_info_df_copy = contact_info_df_copy[['contact_id', 'name', 'email']]
contact_info_df_copy.head(10)

# Create a "first_name" and "last_name" column with the first and last names from the "name" column. 
contact_info_df_copy['first_name'] = contact_info_df_copy['name'].apply(lambda x:x.split(' ')[0])
contact_info_df_copy['last_name'] = contact_info_df_copy['name'].apply(lambda x:x.split(' ')[1])

# Drop the contact_name column
contacts_df_clean = contact_info_df_copy.drop('name', axis=1)
contacts_df_clean.head()

# Reorder the columns
contacts_df_clean = contacts_df_clean[['contact_id', 'first_name', 'last_name', 'email']]
contacts_df_clean.head(10)

# Check the datatypes one more time before exporting as CSV file.
contacts_df_clean.info()

# Export the DataFrame as a CSV file. 

# i have change the name, as we did this with different method using regex, if we use just 'contacts',then file will get overwrite 
contacts_df_clean.to_csv("contacts_regex.csv", encoding='utf8', index=False)
# contacts_df_clean.to_csv("Resources/contacts.csv", encoding='utf8', index=False)

